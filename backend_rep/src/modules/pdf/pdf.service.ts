import { Injectable } from '@nestjs/common';
import PDFDocumentWithTables from 'pdfkit-table';
import { PrismaService } from '../prisma/prisma.service';

@Injectable()
export class PdfService {
  constructor(private prisma: PrismaService) {}
  async generatePDF({ generator }: { generator: string }): Promise<Buffer> {
    const users = await this.prisma.user.findMany({
      include: {
        roles: true,
      },
    });
    const pdfBuffer: Buffer = await new Promise(async (resolve) => {
      const doc = new PDFDocumentWithTables({
        size: 'LETTER',
        bufferPages: true,
      });

      // customize your PDF document
      // title
      doc.text('USER REPORT', {
        align: 'center',
        underline: true,
        oblique: true,
      });

      // generator
      generator ? doc.text(`Generated by: ${generator}`, 100, 120) : null;
      // date/time create
      doc.text(`Generated at: ${new Date().toLocaleString()}`, 100, 140);

      // table
      const table = {
        title: 'USER TABLE',
        headers: ['ID', 'Email', 'Roles', 'Created At', 'Updated At'],
        rows: users.map((user) => [
          user.id,
          user.email,
          user.roles.map((role) => role.name).join(', '),
          new Date(user.createdAt).toLocaleString(),
          new Date(user.updatedAt).toLocaleString(),
        ]),
      };

      await doc.table(table, {
        padding: [5, 10, 5, 10],
        x: 100,
        y: 180,
        /* options */
      });

      doc.end();

      const buffer = [];
      doc.on('data', buffer.push.bind(buffer));
      doc.on('end', () => {
        const data = Buffer.concat(buffer);
        resolve(data);
      });
    });

    return pdfBuffer;
  }
}
